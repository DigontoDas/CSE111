# -*- coding: utf-8 -*-
"""cse 111 assignment 5.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K1S6c-Z7lWXW3jj1FNfJ6xjSDDAx5ZzR

Task 1
"""

class Circle:
    def __init__(self,num1):
      self.__num1 = num1  #private variable

    def getRadius(self):  #we have to return
      return self.__num1

    def setRadius(self,num):
      if num>0:
        self.__num1=num
      else:
        print("Invalid number, enter number again")
    def area(self):
      import math
      area=math.pi*(self.__num1**2) #for all the pie value
      return area
c1 = Circle(4)
print("First circle radius:" , c1.getRadius())
print("First circle area:" , c1.area())

c2 = Circle(5)
print("Second circle radius:" , c2.getRadius())
print("Second circle area:" , c2.area())

"""task2

"""

class Triangle:
  def __init__(self,num1,num2):
    self.__num1 = num1
    self.__num2 = num2
  def getBase(self):
    return self.__num1

  def getHeight(self):
    return self.__num2

  def setBase(self,new):
    self.__num1 = new

  def setHeight(self,new):
    self.__num2 = new

  def area(self):
    area= self.__num1*self.__num2*.5
    return area

t1 = Triangle(10, 5)
print("First Triangle Base:" , t1.getBase())
print("First Triangle Height:" , t1.getHeight())
print("First Triangle area:" ,t1.area())


t2 = Triangle(5, 3)
print("Second Triangle Base:" , t2.getBase())
print("Second Triangle Height:" , t2.getHeight())
print("Second Triangle area:" ,t2.area())

"""task 3"""

class  Teacher:
  def __init__(self,name,dept):
    self.__name = name
    self.__dept = dept
    self.__lst=[]
  def printDetail(self):
    print("====================================")
    print(f"Name: {self.__name}\nDepartment: {self.__dept}")
    print(f"List of courses")
    print("====================================")
    for i in self.__lst:
      print(i.course)
    print("====================================")
  def addCourse(self,objects):

    self.__lst.append(objects)

class Course:
  def __init__(self,course):
    self.course = course



t1 = Teacher("Saad Abdullah", "CSE")
t2 = Teacher("Mumit Khan", "CSE")
t3 = Teacher("Sadia Kazi", "CSE")
c1 = Course("CSE 110 Programming Language I")
c2 = Course("CSE 111 Programming Language-II")
c3 = Course("CSE 220 Data Structures")
c4 = Course("CSE 221 Algorithms")
c5 = Course("CSE 230 Discrete Mathematics")
c6 = Course("CSE 310 Object Oriented Programming")
c7 = Course("CSE 320 Data Communications")
c8 = Course("CSE 340 Computer Architecture")
t1.addCourse(c1)
t1.addCourse(c2)
t2.addCourse(c3)
t2.addCourse(c4)
t2.addCourse(c5)
t3.addCourse(c6)
t3.addCourse(c7)
t3.addCourse(c8)
t1.printDetail()
t2.printDetail()
t3.printDetail()

"""task 4"""

class Team :
  def __init__(self,name=None):
    self.__name = name
    self.__lst = []
  def setName(self,name):
    self.__name =name
  def addPlayer(self,player):
    self.__lst.append(player.name)
  def printDetail(self):
    print("=====================")
    print(f"Team: {self.__name}\nList of Players:")
    print(self.__lst)
    print("=====================")

class Player:
  def __init__(self,name):
    self.name = name


b = Team()
b.setName('Bangladesh')
mashrafi = Player("Mashrafi")
b.addPlayer(mashrafi)
tamim = Player("Tamim")
b.addPlayer(tamim)
b.printDetail()
a = Team("Australia")
ponting = Player("Ponting")
a.addPlayer(ponting)
lee = Player("Lee")
a.addPlayer(lee)
a.printDetail()

"""task 5"""

class Student:
  email = False
  password = False
  loginstat = False
  def __init__(self,name,id,dept):
    self.name = name
    self.id =id
    self.dept =dept
    print("Student object is created!")
class Usis:
  def __init__(self):
    self.dic = {}
    self.lst = []
    print("USIS is ready to use!")
  def advising(self,user1,*courses):
    if Student.email==None and Student.password==None:
      print("Please login to advise courses!")
    else:
      if len(courses)!=0:
         if len(courses)>3:
           print("You need special approval to take more than 3 courses.")
         else:
           for i in courses:
            self.lst.append(i)
           self.dic[user1]=self.lst
           print("Advising successful!")
      else:
        print("You haven't selected any courses.")
  def login(self,user2):
    if Student.email==False and Student.password==False:
      print("Email and password need to be set")
    else:
      Student.loginstat=True
      print("Login successful!")


  def individualDetails(self,user):
    st=""
    for k,v in self.dic.items():
      if k==user:
          st+=", ".join(v)
    return f"Name: {user.name}\nID: {user.id}\nDepartment: {user.dept}\nAdvised courses: {st}"



rakib = Student("Rakib", 12301455, "CSE")
print("1***********************")
usis_obj = Usis()
print("2***********************")
usis_obj.login(rakib)
print("3***********************")
usis_obj.advising(rakib)
print("4***********************")
rakib.email = "rakib@hotmail.com"
rakib.password = "1234"
print("5***********************")
usis_obj.login(rakib)
print("6***********************")
usis_obj.advising(rakib)
print("7***********************")
usis_obj.advising(rakib, "CSE110", "PHY111", "MAT110", "CSE260")
print("8***********************")
usis_obj.advising(rakib, "CSE110", "PHY111", "MAT110")
print("9***********************")
print(usis_obj.individualDetails(rakib))

"""task 6"""

class Train:
   def __init__(self,express,*route):
    self.express = express
    self.route = route
    self.lst = []
    print(f"Welcome aboard on {self.express}")
    print(f"Start: {self.route[0]}")
    print(f"Destination: {self.route[-1]}")
   def addPassenger(self,*passenger):
      self.passenger = passenger
      for i in self.passenger:
        self.lst.append(i)
        print(f"{i.name} welcome abroad")
        if i.start==None:
          i.start=self.route[0]
        if i.stop==None:
          i.stop=self.route[-1]
   def allPassengerDetails(self):
     for i in self.lst:
            start_index=self.route.index(i.start)
            end_index=self.route.index(i.stop)
            self.fare=(end_index-start_index)*100
            print(f"Name: {i.name}, Start: {i.start}, Destination: {i.stop}, Fare:{self.fare}")

class Passenger:
    def __init__(self,name,start=None,stop=None):
      self.name = name
      self.start= start
      self.stop = stop

t1 = Train('T1-Express','New York','Manhattan','Brooklyn','Boston')
print("1========================")
p1 =Passenger("Naruto")
t1.addPassenger(p1)
p2 = Passenger("Sasuke","Manhattan")
p3 = Passenger("Hinata","Manhattan","Brooklyn")
print("2========================")
t1.addPassenger(p2,p3)
print("3========================")
t1.allPassengerDetails()
print("4========================")
t2 = Train('Europe-Express','London','Paris','Brussels','Turkey')
print("5========================")
p4 =Passenger("Max","London","Brussels")
p5 = Passenger("Eleven","Paris")
p6 = Passenger("Mike","Brussels")
t2.addPassenger(p4,p5,p6)
print("6========================")
t2.allPassengerDetails()

"""task 7"""

#task7
class BracuStudent:
  def __init__(self,name,home):
    self.name = name
    self.home = home
    self.Pass = False
  def get_pass(self):
    self.Pass = True
  def show_details(self):
    print(f"Student Name: {self.name}\nLives in {self.home}\nHave Bus Pass? {self.Pass}")
class BracuBus:
  def __init__(self,destination,capacity=2):
    self.destination = destination
    self.capacity = capacity
    self.count = 0
    self.lst = []
  def board(self,*objects):
    if len(objects)==0:
      print("No passenger!")
    else:
      for i in objects:
        if i.Pass==False:
          print("You don't have bus pass")
        else:
            if i.home!=self.destination:
              print("You got on wrong bus!")
            else:
              if len(self.lst)==self.capacity:
                for i in self.lst:
                  print(f'{i} boarded the bus')
                print("Bus is full!")
                break
              else:
                self.lst.append(i.name)

  def show_details(self):
    print(f"Bus Route: {self.destination}\nPassengers Count: {self.count} (Max: {self.capacity})")
    print(f"Passengers On Board: {self.lst}")

st1 = BracuStudent("Afif", "Mirpur")
print("1===========================")
st2 = BracuStudent("Shanto", "Motijheel")
st3 = BracuStudent("Taskin", "Mirpur")
st1.show_details()
st2.show_details()
print("2===========================")
st3.show_details()
print("3===========================")
bus1 = BracuBus("Mirpur")
bus2 = BracuBus("Azimpur", 5)
bus1.show_details()
bus2.show_details()
print("4===========================")
st2.get_pass()
st3.get_pass()
print("5===========================")
st2.show_details()
st3.show_details()
print("6===========================")
bus1.board()
print("7===========================")
bus1.board(st1, st2)
print("8===========================")
st1.get_pass()
st2.home = "Mirpur"
st1.show_details()
st2.show_details()
print("9===========================")
bus1.board(st1, st2, st3)
print("10===========================")
bus1.show_details()

"""task 8"""

class Library:
  def __init__(self,city,books):
    self.city = city
    self.books = books
    self.borrow_dct = {}
  def details(self):
    print("Dhaka Library details")
    print(f"Borrower details:\n{self.borrow_dct}")
    print(f"Books availability: {self.books}")
class Reader:
  def __init__(self,chr):
    self.chr = chr
    self.dct = {}
  def borrow(self,libr,*types):
        for i in types:
            if self.chr not in libr.borrow_dct:
                libr.borrow_dct[self.chr] = 0

            elif i not in libr.books or libr.books[i]==0:
              print(f"{i} books are not available at the moment.")
              continue
            elif libr.borrow_dct[self.chr]>4:
              print("You cannot borrow more than 5 books.")
              continue
            libr.books[i]-=1
            libr.borrow_dct[self.chr]+=1
            if i not in self.dct:
              self.dct[i]=0
            self.dct[i]+=1
            print(f"{i} book is borrowed successfully.")


  def readerInfo(self, reader=None):
        if reader is None:
            print(f"{self.chr}, you have {sum(self.dct.values())} book(s) with you.")
            for reader, book in self.dct.items():
                print(f"Books on {reader}: {book}")
        else:
            book = self.dct.get(reader, 0)
            print(f"{self.chr}, you have {book} {reader} book(s) with you.")

L1=Library('Dhaka',{'Arts':15,'Fiction':135,'Politics':2,'Science':11,'Poetry':15})
L1.details()
print("1----------------------")
r1=Reader('Aladdin')
r1.borrow(L1,'Arts','Fiction','Fiction','Politics')
print("2----------------------")
r1.borrow(L1,'Politics','Fiction')
print("3----------------------")
r1.readerInfo()
print("4----------------------")
r1.readerInfo('Fiction')
print("5----------------------")
L1.details()
print("6----------------------")
r2=Reader('Jasmine')
r2.borrow(L1,'Politics','Poetry')
print("7----------------------")
r2.readerInfo()
print("8----------------------")
L1.details()

# Task 8
class Library:
    def __init__(self, city, boi_av):
        self.city = city
        self.borrower_info = {}
        self.boi_av = boi_av

    def details(self):
        print(f"{self.city} Library details")
        print("Borrower details:")
        print(self.borrower_info)
        print("Books availability:")
        print(self.boi_av)

class Reader:
    def __init__(self, name):
        self.name = name
        self.borrowed_books = {}

    def borrow(self, l, *b_types):
        for bt in b_types:
            if bt not in l.boi_av or l.boi_av[bt] == 0:
              print(f"{bt} books are not available at the moment.")
              continue
            if self.name not in l.borrower_info:
                l.borrower_info[self.name] = 0
            if l.borrower_info[self.name] > 4:
                print("You cannot borrow more than 5 books.")
                continue
            l.boi_av[bt] -= 1
            l.borrower_info[self.name] += 1
            if bt not in self.borrowed_books:
                self.borrowed_books[bt] = 0
            self.borrowed_books[bt] += 1
            print(f"{bt} book is borrowed successfully.")

    def readerInfo(self, bt=None):
        if bt is None:
            print(f"{self.name}, you have {sum(self.borrowed_books.values())} book(s) with you.")
            for bt, num_books in self.borrowed_books.items():
                print(f"Books on {bt}: {num_books}")
        else:
            num_books = self.borrowed_books.get(bt, 0)
            print(f"{self.name}, you have {num_books} {bt} book(s) with you.")
L1=Library('Dhaka',{'Arts':15,'Fiction':135,'Politics':2,'Science':11,'Poetry':15})
L1.details()
print("1----------------------")
r1=Reader('Aladdin')
r1.borrow(L1,'Arts','Fiction','Fiction','Politics')
print("2----------------------")
r1.borrow(L1,'Politics','Fiction')
print("3----------------------")
r1.readerInfo()
print("4----------------------")
r1.readerInfo('Fiction')
print("5----------------------")
L1.details()
print("6----------------------")
r2=Reader('Jasmine')
r2.borrow(L1,'Politics','Poetry')
print("7----------------------")
r2.readerInfo()
print("8----------------------")
L1.details()