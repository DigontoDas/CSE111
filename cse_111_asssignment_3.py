# -*- coding: utf-8 -*-
"""cse 111 asssignment 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18PCSC5wklXEbLBrtdbRiJGRE6TOy8e-F
"""

#task1
class DataType:
  def __init__(self,a,b):
    self.name=a
    self.value=b
data_type1 = DataType("Integer", 1234)
print(data_type1.name)
print(data_type1.value)
print('=====================')
data_type2 = DataType("String", "Hello")
print(data_type2.name)
print(data_type2.value)
print('=====================')
data_type3 = DataType("Float", 4.0)
print(data_type3.name)
print(data_type3.value)

#task2
class Joker:
  def __init__(self,a,b,c):
    self.name= a
    self.power=b
    self.is_he_psycho = c
j1 = Joker('Heath Ledger', 'Mind Game', False)
print(j1.name)
print(j1.power)
print(j1.is_he_psycho)
print("=====================")
j2 = Joker('Joaquin Phoenix', 'Laughing out Loud', True)
print(j2.name)
print(j2.power)
print(j2.is_he_psycho)
print("=====================")
if j1 == j2:
    print('same')
else:
    print('different')
j2.name = 'Heath Ledger'
if j1.name == j2.name:
    print('same')
else:
    print('different')

#task3
class Pokemon:
  def __init__(self,a,b,c,d,e):
    self.pokemon1_name=a
    self.pokemon2_name=b
    self.pokemon1_power=c
    self.pokemon2_power=d
    self.damage_rate=e
team_pika = Pokemon('pikachu', 'charmander', 90, 60, 10)
print('=======Team 1=======')
print('Pokemon 1:',team_pika.pokemon1_name, team_pika.pokemon1_power)
print('Pokemon 2:',team_pika.pokemon2_name, team_pika.pokemon2_power)
pika_combined_power = (team_pika.pokemon1_power + team_pika.pokemon2_power) * team_pika.damage_rate
print('Combined Power:', pika_combined_power)

team_bulb = Pokemon( "bulbasaur", "squirtle", 80, 70, 9)
print('=======Team 2=======')
print('Pokemon 1:',team_bulb.pokemon1_name, team_bulb.pokemon1_power)
print('Pokemon 2:',team_bulb.pokemon2_name, team_bulb.pokemon2_power)
bulb_combined_power = (team_bulb.pokemon1_power + team_bulb.pokemon2_power) * team_bulb.damage_rate
print('Combined Power:', bulb_combined_power)

#task4
class Country:
  def __init__(self):
    self.name = "Bangladesh"
    self.capital = "Dhaka"
    self.continent="Asia"
    self.fifa_ranking = 187


country = Country()
print('Name:',country.name)
print('Continent:',country.continent)
print('Capital:',country.capital)
print('Fifa Ranking:',country.fifa_ranking)
print('===================')
country.name = "Belgium"
country.continent = "Europe"
country.capital = "Brussels"
country.fifa_ranking = 1
print('Name:',country.name)
print('Continent:',country.continent)
print('Capital:',country.capital)
print('Fifa Ranking:',country.fifa_ranking)

#task5
class DemonSlayer:
  def __init__(self,a,b,c,d):
    self.name=a
    self.style=b
    self.number_of_technique=c
    self.kill=d
tanjiro = DemonSlayer("Tanjiro", "Water Breathing", 10, 10)
print('Name:',tanjiro.name)
print('Fighting Style:',tanjiro.style)
print(f'Knows {tanjiro.number_of_technique} technique(s) and has killed {tanjiro.kill} demon(s)')
print('===================')
zenitsu = DemonSlayer("Zenitsu", "Thunder Breathing", 1, 4)
print('Name:',zenitsu.name)
print('Fighting Style:',zenitsu.style)
print(f'Knows {zenitsu.number_of_technique} technique(s) and has killed {zenitsu.kill} demon(s)')
print('===================')
inosuke = DemonSlayer("Inosuke", "Beast Breathing", 5, 7)
print('Name:',inosuke.name)
print('Fighting Style:',inosuke.style)
print(f'Knows {inosuke.number_of_technique} technique(s) and has killed {inosuke.kill} demon(s)')
print('===================')
print(f'{tanjiro.name}, {zenitsu.name}, {inosuke.name} knows total {tanjiro.number_of_technique + zenitsu.number_of_technique + inosuke.number_of_technique} techniques')
print(f'They have killed total {tanjiro.kill + zenitsu.kill + inosuke.kill} demons')

#task6
class box:
  def __init__(self,var):
      self.height= var[0]
      self.width = var[1]
      self.breadth = var[2]
      print("Creating a Box!")
      print(f"Volume of the box is {self.height*self.width*self.breadth} cubic units.")
print("Box 1")
b1 = box([10,10,10])
print("=========================")
print("Height:", b1.height)
print("Width:", b1.width)
print("Breadth:", b1.breadth)
print("-------------------------")
print("Box 2")
b2 = box((30,10,10))
print("=========================")
print("Height:", b2.height)
print("Width:", b2.width)
print("Breadth:", b2.breadth)
b2.height = 300
print("Updating Box 2!")
print("Height:", b2.height)
print("Width:", b2.width)
print("Breadth:", b2.breadth)
print("-------------------------")
print("Box 3")
b3 = b2
print("Height:", b3.height)
print("Width:", b3.width)
print("Breadth:", b3.breadth)

#task7
class buttons:
    def __init__(self, word, spaces, border):
        self.word = word
        self.spaces = spaces
        self.border = border

        duo = (self.border)+((self.spaces)*" ")+self.word+((self.spaces)*" ")+((self.border))
        l = len(duo)
        print(l*self.border)
        print(duo)
        print(l*self.border)


word = "CANCEL"
spaces = 10
border = 'x'
b1 = buttons(word, spaces, border)
print("=======================================================")
b2 = buttons("Notify",3, '!')
print("=======================================================")
b3 = buttons('SAVE PROGRESS', 5, '$')

# Task 8
class Calculator:
    def __init__(self):
      print("Let's Calculate!")

    def add(self, num1, num2):
        return num1 + num2

    def subtract(self, num1, num2):
        return num1 - num2

    def multiply(self, num1, num2):
        return num1 * num2

    def divide(self, num1, num2):
        return num1 / num2


first_number = int(input())
operator = input()
second_number = int(input())
calc = Calculator()
print("Value 1:",first_number)
print("Operator:",operator)
print("Value 2:",second_number)

if operator == '+':
    result = calc.add(first_number,second_number )
elif operator == '-':
    result = calc.subtract(first_number, second_number)
elif operator == '*':
    result = calc.multiply(first_number, second_number)
elif operator == '/':
    result = calc.divide(first_number, second_number)
else:
    result = "Operator Invalid"

print(f"Result: {result}")

#task9
class Patient:
  def __init__(self,a,b,c,d):
    self.Name=a
    self.Age = b
    self.Weight = c
    self.Height=d
    self.bmi=self.Weight/(self.Height/100)**2
  def printDetails(self):
    print(f"Name: {self.Name}")
    print(f"Age: {self.Age}")
    print(f"Weight: {self.Weight}")
    print(f"Height: {self.Height}")
    print(f"BMI: {self.bmi}")
p1 = Patient("A", 55, 63.0, 158.0)
p1.printDetails()
print("====================")
p2 = Patient("B", 53, 61.0, 149.0)
p2.printDetails()

#task10
class Vehicle:
  def __init__(self):
      self.x = 0
      self.y = 0
  def moveUp(self):
    self.y = 1
    self.x = 0
  def moveLeft(self):
    self.x = -1
    self.y = 1
  def moveDown(self):
    self.y = 0
    self.x = -1
  def moveRight(self):
    self.x = 0
    self.y = 0
  def print_position(self):
    print((self.x,self.y))
car = Vehicle()
car.print_position()
car.moveUp()
car.print_position()
car.moveLeft()
car.print_position()
car.moveDown()
car.print_position()
car.moveRight()

#task11
class Shape :
  def __init__(self,name,length1,length2):
    self.name = name
    self.length1 = length1
    self.length2 = length2
  def area(self):
    if self.name =="Triangle":
      Area = (.5*self.length1*self.length2)
      print(f"Area: {Area}")
    elif self.name == "Square":
      Area = self.length1**2
      print(f"Area: {Area}")
    elif self.name == "Rectangle":
      Area = self.length1*self.length2
      print(f"Area: {Area}")
    elif self.name == "Rhombus":
      Area = (.5*self.length1*self.length2)
      print(f"Area: {Area}")
    else:
      print(f"Area: Shape unknown")
triangle = Shape("Triangle",10,25)
triangle.area()
print("==========================")
square = Shape("Square",10,10)
square.area()
print("==========================")
rhombus = Shape("Rhombus",18,25)
rhombus.area()
print("==========================")
rectangle = Shape("Rectangle",15,30)
rectangle.area()
print("==========================")
trapezium = Shape("Trapezium",15,30)
trapezium.area()

#task 12
class Calculator:
  def __init__(self):
    print("Calculator is ready!")
  def calculate(self,num1,num2,operator):
    self.num1 =num1
    self.num2 = num2
    self.operator = operator
    if self.operator=="+":
      value = self.num1+self.num2
    elif self.operator=="-":
      value = self.num1-self.num2
    elif self.operator=="*":
      value = self.num1*self.num2
    elif self.operator=="/":
      value = self.num1/self.num2
    self.value = value
    return value
  def showCalculation(self):
    print(f"{self.num1}{self.operator}{self.num2}={self.value}")
c1 = Calculator()
print("==================")
val = c1.calculate(10, 20, '+')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 10, '-')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 5, '*')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 16, '/')
print("Returned value:", val)
c1.showCalculation()

#task13
class Programmer:
  def __init__(self,a,b,c):
    self.name = a
    self.language = b
    self.experience = c
    print("Horray! A new programmer is born")
  def addExp(self,years):
    self.experience+=years
    print(f'Updating experience of {self.name}')
  def printDetails(self):
    print(f"Name: {self.name}\nLanguage: {self.language}\nExperience: {self.experience}.")



p1 = Programmer("Ethen Hunt", "Java", 10)
p1.printDetails()
print('--------------------------')
p2 = Programmer("James Bond", "C++", 7)
p2.printDetails()
print('--------------------------')
p3 = Programmer("Jon Snow", "Python", 4)
p3.printDetails()
p3.addExp(5)
p3.printDetails()