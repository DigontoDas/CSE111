# -*- coding: utf-8 -*-
"""cse 111 assignment 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-dfyUIl3Hhq-oHvqCub1oVpnFDSsOItT
"""

#task1
class Customer:
  def __init__(self,name):
    self.name =name
  def greet(self,a=None):
    if a==None:
      print("Hello!")
    else:
      print(f"Hello {a}!")
  def purchase(self,*items):
    print(f"{self.name}, you purchased {len(items)}")
    for i in items:
      print(i)

customer_1 = Customer("Sam")
customer_1.greet()
customer_1.purchase("chips", "chocolate", "orange juice")
print("-----------------------------")
customer_2 = Customer("David")
customer_2.greet("David")
customer_2.purchase("orange juice")

#task2
class Panda:
  def __init__(self,name,gender,age):
    self.name=name
    self.gender = gender
    self.age = age
  def sleep(self,hour=None):
    if hour is None:
      diet = "bamboo leaves"
    elif hour <= 5:
      diet = "Mixed Veggies"
    elif hour<= 8:
      diet = "Eggplant & Tofu"
    elif hour<=11:
      diet = "Broccoli Chicken"
    else:
      diet = "bamboo leaves"

    if hour is None:
      return f"{self.name}'s duration is unknown thus should have only {diet} "
    else:
      return f"{self.name}'s {hour} is unknown thus should have only {diet} "
panda1 = Panda("Kunfu", "Male", 5)
panda2 = Panda("Pan Pan", "Female",3)
panda3 = Panda("Ming Ming", "Female",8)

print("{} is a {} Panda Bear who is {} years old".format(panda1.name,panda1.gender,panda1.age))

print("{} is a {} Panda Bear who is {} years old".format(panda2.name,panda2.gender,panda2.age))

print("{} is a {} Panda Bear who is {} years old".format(panda3.name,panda3.gender,panda3.age))
print("===========================")
print(panda2.sleep(10))
print(panda1.sleep(4))
print(panda3.sleep())

#task3
class Cat:
  def __init__(self,color = None ,action = None):
    if color==None:
      self.color = "White"
    else:
      self.color = color
    if action==None:
      self.action = "sitting"
    else:
      self.action = action
  def printCat(self):
    print(f"{self.color} cat is {self.action}")
  def changeColor(self,color):
    self.color = color
c1 = Cat()
c2 = Cat("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()

#task4
class Student :
  def __init__(self,name=None):
    self.name =name
    self.add = 0
  def quizcalc(self,*score):
    for i in score:
      self.add+=int(i)
    self.final_score = self.add/3

  def printdetail(self):
    print("Hello default student")
    print(f"Your average quiz score is {self.final_score}")
s1 = Student()
s1.quizcalc(10)
print('--------------------------------')
s1.printdetail()
s2 = Student('Harry')
s2.quizcalc(10,8)
print('--------------------------------')
s2.printdetail()
s3 = Student('Hermione')
s3.quizcalc(10,9,10)
print('--------------------------------')
s3.printdetail()

#task5
class Student :
  def __init__(self,name,id ,dept= "CSE"):
    self.name = name
    self.id = id
    self.dept = dept

  def dailyEffort(self,hour):
    self.hour = hour
  def printDetails(self):
    print(f"Name: {self.name}")
    print(f"ID: {self.id}")
    print(f"Department: {self.dept}")
    print(f"Daily Effort: {self.hour} hour(s)")

    if self.hour<=2 :
        print("Suggestions: Should give more effort!")
    elif self.hour <= 4:
        print("Suggestion: Keep up the good work!")
    else:
        print("Excellent! Now motivate others.")
harry = Student('Harry Potter', 123)
harry.dailyEffort(3)
harry.printDetails()
print('========================')
john = Student("John Wick", 456, "BBA")
john.dailyEffort(2)
john.printDetails()
print('========================')
naruto = Student("Naruto Uzumaki", 777, "Ninja")
naruto.dailyEffort(6)
naruto.printDetails()

#task6
class Patient:
  def __init__(self,name,age):
    self.name = name
    self.age = age
    self.lst  = []
  def add_Symptom(self,*Symptoms):
    for i in Symptoms:
      self.lst.append(i)
      print(self.lst)
  def printPatientDetail(self):
    print(f"Name: {self.name}\nAge: {self.age}")
p1 = Patient("Thomas", 23)
p1.add_Symptom("Headache")
p2 = Patient("Carol", 20)
p2.add_Symptom("Vomiting", "Coughing")
p3 = Patient("Mike", 25)
p3.add_Symptom("Fever", "Headache", "Coughing")
print("=========================")
p1.printPatientDetail()
print("=========================")
p2.printPatientDetail()
print("=========================")
p3.printPatientDetail()

#task7
class Match :
  def __init__(self,name):
    self.name = name
    self.run = 0
    self.over = 0
    self.wicket = 0
    self.batting_team = ""
    self.bowling_team = ""
    print("5..4..3..2..1.. Play !!!")

  def add_run(self,run):
    self.run += run
  def add_over (self,over):
    if over>=5:
      print("Warning! Cannot add 5 over/s (5 over match)")
    else:
      self.over+=over
  def add_wicket(self,wicket):
    self.wicket+=1
  def print_scoreboard(self):
    self.v1 = self.name.split("-")
    self.batting_team+=self.v1[0]
    self.bowling_team+=self.v1[1]
    return f"Batting Team: {self.batting_team}\nBowling Team: { self.bowling_team}\nTotal Runs: {self.run} Wickets: {self.wicket} Overs: {self.over}"

match1 = Match("Rangpur Riders-Cumilla Victorians")
print("=========================")
match1.add_run(4)
match1.add_run(6)
match1.add_over(1)
print(match1.print_scoreboard())
print("=========================")
match1.add_over(5)
print("=========================")
match1.add_wicket(1)
print(match1.print_scoreboard())

#task8
class ParcelKoro:
  def __init__(self,name=None,weight=0):
    self.name = name
    self.product_weight = weight
  def calculateFee(self,location=None):
    if location== None:
      location_charge = 50
    else:
      location_charge = 100
    if self.product_weight==0:
      self.total_fee = 0
    else:
      self.total_fee = (self.product_weight*20)+location_charge
  def printDetails(self):
    if self.name == None:
      name = "No name set"
    else:
      name = self.name
    print(f"Customer Name: {name}\nProduct Weight: {self.product_weight}\nTotal fee: {self.total_fee}")
print("**********************")
p1 = ParcelKoro()
p1.calculateFee()
p1.printDetails()
print("**********************")
p2 = ParcelKoro('Bob The Builder')
p2.calculateFee()
p2.printDetails()
print("----------------------------")
p2.product_weight = 15
p2.calculateFee()
p2.printDetails()
print("**********************")
p3 = ParcelKoro('Dora The Explorer', 10)
p3.calculateFee('Dhanmondi')
p3.printDetails()

#task9
class Batsman:
  def __init__(self,*args):
    if len(args)<3:
      self.name = None
      self.num1 = args[-2]
      self.num2 = args[-1]
    else:
      self.name = args[-3]
      self.num1 = args[-2]
      self.num2 = args[-1]
  def printCareerStatistics(self):
    if self.name == None:
      print("Name: New Batsman")
    else:
      print(f"Name: {self.name}")
    print(f"Runs Scored: {self.num1} , Balls Faced: {self.num2}")
  def setName(self,name):
    self.name = name
  def battingStrikeRate(self):
   strike_rate= (self.num1/self.num2)*100
   return strike_rate

b1 = Batsman(6101, 7380)
b1.printCareerStatistics()
print("============================")
b2 = Batsman("Liton Das", 678, 773)
b2.printCareerStatistics()
print("----------------------------")
print(b2.battingStrikeRate())
print("============================")
b1.setName("Shakib Al Hasan")
b1.printCareerStatistics()
print("----------------------------")
print(b1.battingStrikeRate())

#task10
class EPL_Team :
  def __init__(self,name,song="No Slogan"):
    self.name = name
    self.song = song
    self.title = 0
  def showClubInfo(self):
    return f"Name: {self.name}\nSong: {self.song}\nTotal No of title: {self.title}"
  def increaseTitle(self):
    self.title+=1
  def changeSong(self,changed):
    self.song = changed
manu = EPL_Team('Manchester United', 'Glory Glory Man United')
chelsea = EPL_Team('Chelsea')
print('===================')
print(manu.showClubInfo())
print('##################')
manu.increaseTitle()
print(manu.showClubInfo())
print('===================')
print(chelsea.showClubInfo())
chelsea.changeSong('Keep the blue flag flying high')
print(chelsea.showClubInfo())

#task11
class Author:
  def __init__(self,name="Default",*books):
    self.name = name
    self.booklist = []
    for i in books:
      self.booklist.append(i)
  def addBooks(self,*args):
    for i in args:
      self.booklist.append(i)
  def changeName(self,changed):
    self.name = changed
  def printDetails(self):
    print(f"Author Name: {self.name}\n--------\nList of Books:")
    for i in self.booklist:
      print(i)
auth1 = Author('Humayun Ahmed')
auth1.addBooks('Deyal', 'Megher Opor Bari')
auth1.printDetails()
print("===================")
auth2 = Author()
print(auth2.name)
auth2.changeName('Mario Puzo')
auth2.addBooks('The Godfather', 'Omerta', 'The Sicilian')
print("===================")
auth2.printDetails()
print("===================")
auth3 = Author('Paolo Coelho', 'The Alchemist', 'The Fifth Mountain')
auth3.printDetails()

#task12
class TaxiLagbe:
  def __init__(self,number,name):
      self.name =name
      self.number = number
      self.vacancy = 4
      self.passengerlst = []
      self.fare  =0
  def addPassenger(self,*ass):
    if len(ass)>self.vacancy:
        print("Taxi Full! No more passengers can be added.")
    else:
       for i in ass:
        passenger,fare = i.split("_")
        self.passengerlst.append(passenger)
        self.fare+=int(fare)
        self.vacancy-=1
        print(f"Dear {passenger}! Welcome to TaxiLagbe")


  def printDetails(self):
    print(f"Trip info for Taxi number: {self.number}\nThis taxi can cover only Dhaka area\nTotal passengers: {self.vacancy}\npassenger list:")
    print(", ".join(self.passengerlst))
    print(f"Total collected fare: {self.fare}")

taxi1 = TaxiLagbe('1010-01', 'Dhaka')
print('-------------------------------')
taxi1.addPassenger('Walker_100', 'Wood_200')
taxi1.addPassenger('Matt_100')
taxi1.addPassenger('Wilson_105')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi1.addPassenger('Karen_200')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi2 = TaxiLagbe('1010-02', 'Khulna')
taxi2.addPassenger('Ronald_115')
taxi2.addPassenger('Parker_215')
print('-------------------------------')
taxi2.printDetails()

#task 13
class Account:
  def __init__(self,name="Default Account",balance = 0.0):
    self.name = name
    self.balance = balance
  def withdraw(self,num):
    if self.balance>num:
      if (self.balance-num)>=3071:
        new = self.balance-num
        print(f"Withdraw successful! New balance is: {new}")
      else:
       print("Sorry, Withdraw unsuccessful! The account balance after deducting withdraw amount is equal to or less than minimum.")
    else:
      print("Sorry, Withdraw unsuccessful! The account balance after deducting withdraw amount is equal to or less than minimum.")
  def details(self):
    return f"{self.name}\n{self.balance}"
a1 = Account()
print(a1.details())
print("------------------------")
a1.name = "Oliver"
a1.balance = 10000.0
print(a1.details())
print("------------------------")
a2 = Account("Liam")
print(a2.details())
print("------------------------")
a3 = Account("Noah",400)
print(a3.details())
print("------------------------")
a1.withdraw(6930)
print("------------------------")
a2.withdraw(600)
print("------------------------")
a1.withdraw(6929)

#task 14
class StudentDatabase:
  def __init__(self,name,id):
    self.name = name
    self.id = id
    self.grades = {}
  def calculateGPA(self,lis,time):
    lis1 = []
    lis2 = []
    sum = 0
    dict1 = {}
    self.time = time
    for i in lis:
      p = i.split(':')
      lis1.append(p[0].strip())
      lis2.append(float(p[1]))
      sum += float(p[1])
    dict1[tuple(lis1)] = sum/len(lis2)
    self.grades[time] = dict1
  def printDetails(self):
    print(f'Name: {self.name}')
    print(f'ID: {self.id}')
    for k,v in self.grades.items():
      print(f'Courses taken in {self.time}')
      for u,i in v.items():
        for b in u:
          print(b)
        print(f'{i:.1F}')

s1 = StudentDatabase('Pietro', '10101222')
s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0', 'MAT110: 4.0'], 'Summer2020')
s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'], 'Summer2021')
print(f'Grades for {s1.name}\n{s1.grades}')
print('------------------------------------------------------')
s1.printDetails()
s2 = StudentDatabase('Wanda', '10103332')
s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7', 'ENG101: 4.0'], 'Summer2022')
print('------------------------------------------------------')
print(f'Grades for {s2.name}\n{s2.grades}')
print('------------------------------------------------------')
s2.printDetails()

class StudentDatabase:
  def __init__(self,name,id):
    self.name = name
    self.id = id
    self.grades = {}
  def calculateGPA(self,lis,time):
    lis1 = []
    lis2 = []
    sum = 0
    dict1 = {}
    self.time = time
    for i in lis:
      p = i.split(':')
      lis1.append(p[0].strip())
      lis2.append(float(p[1]))
      sum += float(p[1])
    dict1[tuple(lis1)] = sum/len(lis2)
    self.grades[time] = dict1
  def printDetails(self):
    print(f'Name: {self.name}')
    print(f'ID: {self.id}')
    for k,v in self.grades.items():
      print(f'Courses taken in {self.time}')
      for u,i in v.items():
        for b in u:
          print(b)
        print(f'{i:.1f}')

s1 = StudentDatabase('Pietro', '10101222')
s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0', 'MAT110: 4.0'], 'Summer2020')
s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'], 'Summer2021')
print(f'Grades for {s1.name}\n{s1.grades}')
print('------------------------------------------------------')
s1.printDetails()
s2 = StudentDatabase('Wanda', '10103332')
s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7', 'ENG101: 4.0'], 'Summer2022')
print('------------------------------------------------------')
print(f'Grades for {s2.name}\n{s2.grades}')
print('------------------------------------------------------')
s2.printDetails()

class PlayerMaker:
  def __init__(self,name="Unknow Player",role="Striker"):
    self.name = name
    self.role = role
    self.skillCat={"Striker":["Positioning", "Shooting"],
                  "Midfielder":["Dribbling","Passing"],
                  "Defender":["Strength","Tackling"]}
    self.skillSet = {}
  def customizedPlayer(self,skills):
    if len(skills) < 2:
      print("You need to select values for both skills.")
    else:
      for i in skills.keys():
        if i not in self.skillCat[self.role]:
          print(f"{i} is not a skill of a {self.role}.")
        else:
          self.skillSet[i] = skills[i]
          print(f"{i} skill added.")
  def getDetails(self):
    s=f"Player Name:{self.name}\n"
    s+=f"Role:{self.role}\n"
    for skill,val in self.skillSet.items():
      s+=f"{skill} : {val}\n"
    return s[:-1]


#Write your code here
pm1 = PlayerMaker()
pm1.customizedPlayer({"Positioning":91,"Shooting":88})
print("1########################### ")
print(pm1.getDetails())
print("2=========================")
pm2 = PlayerMaker("Boogy Man","Midfielder")
pm2.customizedPlayer({"Dribbling":94,"Shooting":90})
print("3###########################")
print(pm2.getDetails())
print("4=========================")
pm3 = PlayerMaker("Mad Man","Defender")
pm3.customizedPlayer({"Strength":92})
print("5###########################")
print(pm3.getDetails())
print("6=========================")
pm3.customizedPlayer({"Strength":92,"Tackling":88})
print("7###########################")
print(pm3.getDetails())

#task23
class Author :
  def __init__(self,name=None):
    self.name = name
    self.genre= {}
    self.bookcount = 0
  def addBook(self,book_name,genre):
    if self.name==None:
      print("A book can not be added without author name")
    else:
      if genre in self.genre:
        self.genre[genre].append(book_name)
      else:
        self.genre = [book_name]
      self.bookcount+=1
  def printDetail(self):
    print(f"Number of Book(s): {self.bookcount}\nAuthor Name: {self.name}")
    for k,v in self.genre.items():
      print(k,end=":")
      for i in range(len(v)):
        if i != len(v) - 1:
          print(v[i],end=", ")
        else:
          print(v[i])

#task20
class Student:
  def __init__(self,name=None,dept=None):
    self.name = name
    self.department = dept
    self.lst = []
    if self.name==None and self.department==None:
      print("Student name and department need to be set")
    elif self.name==None and self.department!=None:
      print(f"Student name need to be set")
    elif self.name!=None and self.department==None:
      print(f"Department for {self.name} needs to be set")
    else:
      print(f"{self.name} is from {self.department} department")
  def update_name(self,x):
    self.name = x
  def update_department(self,y):
    self.department=y
  def enroll(self,*courses):
    for i in courses:
      self.lst.append(i)
  def printDetail(self):
    print(f"Name: {self.name}\nDepartment: {self.department}")
    print(f"{self.name} enrolled in {len(self.lst)} course(s):")
    for j in range(len(self.lst)-1):
      print(self.lst[j],end=", ")
    print(self.lst[-1])

s1 = Student()
print("=========================")
s2 = Student("Carol")
print("=========================")
s3 = Student("Jon", "EEE")
print("=========================")
s1.update_name("Bob")
s1.update_department("CSE")
s2.update_department("BBA")
s1.enroll("CSE110", "MAT110", "ENG091")
s2.enroll("BUS101")
s3.enroll("MAT110", "PHY111")
print("###########################")
s1.printDetail()
print("=========================")
s2.printDetail()
print("=========================")
s3.printDetail()

#task21
class Student:
  def __init__(self,name,id,dept):
    self.name = name
    self.id = id
    self.department =dept
    self.lst = []
  def details(self):
    print(f"Name: {self.name}\nID: {self.id}\nDepartment: {self.department}")
  def advise(self,*courses):
    for i in courses:
      self.lst.append(i)
    return f"{self.name}, you have taken {float(len(courses)*3)} credits"
    retur = f"List of courses: "
    return retur
    #for j in range(len(self.lst)-1):
     # return (self.lst[j],end=", ")
   # return (self.lst[-1])
s1 = Student("Alice","20103012","CSE")
s2 = Student("Bob", "18301254","EEE")
s3 = Student("Carol", "17101238","CSE")
print("##########################")
print(s1.details())
print("##########################")
print(s2.details())
print("##########################")
s1.advise("CSE110", "MAT110", "PHY111")
print("##########################")
s2.advise("BUS101", "MAT120")
print("##########################")
s3.advise("MAT110", "PHY111", "ENG102",
"CSE111", "CSE230")

class Test5:
  def __init__(self):
      self.sum = 0
      self.y = 0
  def methodA(self):
      x=y=k=0
      msg = [5]
      while (k < 2):
          y += msg[0]
          x = y + self.methodB(msg, k)
          self.sum = x + y + msg[0]
          print(x ," " , y, " " , self.sum)
          k+=1
  def methodB(self, mg2, mg1):
        x = 0
        self.y += mg2[0]
        x = x + 3 + mg1
        self.sum += x + self.y
        mg2[0] = self.y + mg1
        mg1 += x + 2
        print(x , " " ,self.y, " " , self.sum)
        return mg1

t1 = Test5()
t1.methodA()
t1.methodA()
t1.methodA()

class Test4:
    def __init__(self):
        self.sum, self.y = 0, 0
    def methodA(self):
        x, y = 0, 0
        msg = [0]
        msg[0] = 5
        y = y + self.methodB(msg[0])
        x = y + self.methodB(msg, msg[0])
        self.sum = x + y + msg[0]
        print(x, y, self.sum)
    def methodB(self, *args):
        if len(args) == 1:
            mg1 = args[0]
            x, y = 0, 0
            y = y + mg1
            x = x + 33 + mg1
            self.sum = self.sum + x + y
            self.y = mg1 + x + 2
            print(x, y, self.sum)
            return y
        else:
            mg2, mg1 = args
            x = 0
            self.y = self.y + mg2[0]
            x = x + 33 + mg1
            self.sum = self.sum + x + self.y
            mg2[0] = self.y + mg1
            mg1 = mg1 + x + 2
            print(x, self.y, self.sum)
            return self.sum

t3 = Test4()
t3.methodA()
t3.methodA()
t3.methodA()
t3.methodA()

class msgClass:
    def __init__(self):
        self.content = 0
class Q5:
    def __init__(self):
        self.sum = 1
        self.x = 2
        self.y = 3
    def methodA(self):
        x, y = 1, 1
        msg = []
        myMsg = msgClass()
        myMsg.content = self.x
        msg.append(myMsg)
        msg[0].content = self.y + myMsg.content
        self.y = self.y + self.methodB(msg[0])
        y = self.methodB(msg[0]) + self.y
        x = y + self.methodB(msg[0], msg)
        self.sum = x + y + msg[0].content
        print(x," ", y," ", self.sum)

    def methodB(self, mg1, mg2 = None):
        if mg2 == None:
            x, y = 5, 6
            y = self.sum + mg1.content
            self.y = y + mg1.content
            x = self.x + 7 +mg1.content
            self.sum = self.sum + x + y
            self.x = mg1.content + x +8
            print(x, " ", y," ", self.sum)
            return y
        else:
            x = 1
            self.y += mg2[0].content
            mg2[0].content = self.y + mg1.content
            x = x + 4 + mg1.content
            self.sum += x + self.y
            mg1.content = self.sum - mg2[0].content
            print(self.x, " ",self.y," ", self.sum)
            return self.sum

q = Q5()
q.methodA()